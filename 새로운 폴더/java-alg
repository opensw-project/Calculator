import org.apache.commons.math3.optim.*;
import org.apache.commons.math3.optim.linear.*;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction;

public class LinearProgrammingExample {
    public static void main(String[] args) {
        // 目的関数の係数
        double[] objectiveCoefficients = { 3, 2 };

        // 制約条件の係数行列
        double[][] constraintCoefficients = {
                { 1, 1 },
                { 2, -1 },
                { -1, 2 }
        };

        // 右辺値
        double[] constraintValues = { 4, 3, 2 };

        // 制約条件の関係性（<= と =）
        Relationship[] relationships = {
                Relationship.LEQ,
                Relationship.LEQ,
                Relationship.LEQ
        };

        // 目的関数を最大化する最適化問題を作成
        LinearObjectiveFunction objectiveFunction = new LinearObjectiveFunction(objectiveCoefficients, 0);
        LinearConstraintSet constraints = new LinearConstraintSet(constraintCoefficients, relationships, constraintValues);
        OptimizationData[] data = { objectiveFunction, constraints };
        PointValuePair solution = null;

        try {
            // 線形計画法による最適化を実行
            solution = new SimplexSolver().optimize(new MaxIter(100), objectiveFunction, constraints,
                    GoalType.MAXIMIZE, new NonNegativeConstraint(true));
        } catch (NoFeasibleSolutionException e) {
            System.out.println("解が見つかりませんでした。");
            return;
        }

        // 結果を出力
        System.out.println("Optimal solution:");
        for (int i = 0; i < objectiveCoefficients.length; i++) {
            System.out.println("x" + (i + 1) + " = " + solution.getPoint()[i]);
        }
        System.out.println("Objective value = " + solution.getValue());
    }
}
