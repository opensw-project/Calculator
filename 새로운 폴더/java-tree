// ツリーノードを表すクラス
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    
    public TreeNode(int val) {
        this.val = val;
    }
}

// ツリーの操作や探索を行うクラス
class Tree {
    TreeNode root;
    
    public Tree() {
        root = null;
    }
    
    // ツリーにノードを挿入するメソッド
    public void insert(int val) {
        root = insertNode(root, val);
    }
    
    private TreeNode insertNode(TreeNode node, int val) {
        if (node == null) {
            return new TreeNode(val);
        }
        
        if (val < node.val) {
            node.left = insertNode(node.left, val);
        } else if (val > node.val) {
            node.right = insertNode(node.right, val);
        }
        
        return node;
    }
    
    // ツリーを前順（Preorder）で走査するメソッド
    public void preorderTraversal() {
        preorder(root);
    }
    
    private void preorder(TreeNode node) {
        if (node != null) {
            System.out.print(node.val + " ");
            preorder(node.left);
            preorder(node.right);
        }
    }
    
    // ツリーを中順（Inorder）で走査するメソッド
    public void inorderTraversal() {
        inorder(root);
    }
    
    private void inorder(TreeNode node) {
        if (node != null) {
            inorder(node.left);
            System.out.print(node.val + " ");
            inorder(node.right);
        }
    }
    
    // ツリーを後順（Postorder）で走査するメソッド
    public void postorderTraversal() {
        postorder(root);
    }
    
    private void postorder(TreeNode node) {
        if (node != null) {
            postorder(node.left);
            postorder(node.right);
            System.out.print(node.val + " ");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Tree tree = new Tree();
        
        // ノードの挿入
        tree.insert(5);
        tree.insert(3);
        tree.insert(8);
        tree.insert(2);
        tree.insert(4);
        tree.insert(7);
        tree.insert(9);
        
        // 前順で走査
        System.out.println("Preorder Traversal:");
        tree.preorderTraversal();
        System.out.println();
        
        // 中順で走査
        System.out.println("Inorder Traversal:");
        tree.inorderTraversal();
        System.out.println();
        
        // 後順で走査
        System.out.println("Postorder Traversal:");
        tree.postorderTraversal();
        System.out.println();
    }
}
