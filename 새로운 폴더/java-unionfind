public class UnionFind {
    private int[] parent;
    private int[] size;

    public UnionFind(int n) {
        parent = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    public int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }

    public void union(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);

        if (rootX != rootY) {
            if (size[rootX] < size[rootY]) {
                parent[rootX] = rootY;
                size[rootY] += size[rootX];
            } else {
                parent[rootY] = rootX;
                size[rootX] += size[rootY];
            }
        }
    }

    public boolean isConnected(int x, int y) {
        return find(x) == find(y);
    }

    public static void main(String[] args) {
        int n = 10; // 要素数
        UnionFind uf = new UnionFind(n);

        uf.union(0, 1);
        uf.union(2, 3);
        uf.union(4, 5);
        uf.union(6, 7);
        uf.union(8, 9);

        System.out.println("0 and 1 are connected: " + uf.isConnected(0, 1));
        System.out.println("2 and 3 are connected: " + uf.isConnected(2, 3));
        System.out.println("4 and 5 are connected: " + uf.isConnected(4, 5));
        System.out.println("6 and 7 are connected: " + uf.isConnected(6, 7));
        System.out.println("8 and 9 are connected: " + uf.isConnected(8, 9));
        System.out.println("1 and 3 are connected: " + uf.isConnected(1, 3));
        System.out.println("5 and 7 are connected: " + uf.isConnected(5, 7));
    }
}
