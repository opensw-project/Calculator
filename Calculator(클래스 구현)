import matplotlib.pyplot as plt
import numpy as np
import math

class Calculator:   
    def add(self, x, y):
        return x + y

    def subtract(self, x, y):
        return x - y

    def multiply(self, x, y):
        return x * y

    def divide(self, x, y):
        return x / y

    def squared(self, x, y):
        return x ** y

    def modulo(self, x, y):
        return x % y

    def square_root(self, x):  #제곱근
        return math.sqrt(x)

    def variance(self, nums):  #분산
        n = len(nums)
        mean = sum(nums) / n
        return sum((x-mean) ** 2 for x in nums) / n

    def std_deviation(self, nums):   #표준편차
        return math.sqrt(self.variance(nums))

    def time_change(self,x):   #초→(시간:분:초)
        return f'{x//3600}:{x%3600//60}:{x%60}'

    def exp(self,x):    #지수 e^x를 반환합니다
        return math.exp(x)

    def sin(self,x):     #사인값
        return math.sin(x)

    def cos(self,x):     #코사인값
        return math.cos(x)

    def tan(self,x):     #탄젠트
        return math.tan(x)

    def asin(self,x):     #역사인값
        return math.asin(x)

    def acos(self,x):     #역코사인값
        return math.acos(x)

    def atan(self,x):     #역탄젠트값
        return math.atan(x)
    
    def factorial(self,x):
        if x == 1:      # n이 1일 때
            return 1    # 1을 반환하고 재귀호출을 끝냄
        return x * cal.factorial(x - 1)
    
    def fabs(self, x):    #절대값
        return math.fabs(x)
    
    
    def deter(self, n):   # 행렬식
        l = []
        
        print('한 행씩 입력!!(예: 1 2)')

        for i in range(n):
            a = list(map(int, input().split()))
            l.append(a)

        if n == 2:
            return (l[0][0]*l[1][1]) - (l[0][1]*l[1][0])

        #else:
            # 3차 행렬식
           
    def calculate_regression_line(self, x_values, y_values):
        n = len(x_values)
        if n != len(y_values):
            raise ValueError("x값의 수와 y값의 수는 같아야 합니다.")
    
        # x, y, x^2, xy의 합을 계산합니다.
        sum_x = sum(x_values)
        sum_y = sum(y_values)
        sum_x_squared = sum(x ** 2 for x in x_values)
        sum_xy = sum(x * y for x, y in zip(x_values, y_values))

        # 기울기 (m)와 y절편 (b)을 계산합니다.
        slope = (n * sum_xy - sum_x * sum_y) / (n * sum_x_squared - sum_x ** 2)
        y_intercept = (sum_y - slope * sum_x) / n
        #coefficients = np.polyfit(x_values, y_values, 1)
        #p = np.poly1d(coefficients)
        return slope, y_intercept



cal = Calculator()
print("계산 가능한 연산 목록")
print("더하기(+)   빼기(−)   곱하기(×)   나누기(÷)   제곱(**)  나머지(%)  제곱근(√)  분산 표준편차 시간계산(h:m:s)  지수(e)")  
print("사인(sin)  코사인(cos)  탄젠트(tan)  역사인(asin)  코사인(acos)  탄젠트(atan)  행렬식(det)")
